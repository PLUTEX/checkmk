#!/bin/bash
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Reason for this no-op: shellcheck disable=... before the first command disables the error for the
# entire script.
:

# Disable unused variable error (needed to keep track of version)
# shellcheck disable=SC2034
CMK_VERSION="2.1.0p16"

set -eu
set -o pipefail
shopt -s lastpipe

# Function to replace "if type [somecmd]" idiom
# 'command -v' tends to be more robust vs 'which' and 'type' based tests
inpath() {
    command -v "${1:?No command to test}" >/dev/null 2>&1
}

INPATH_UDEVADM=$(inpath udevadm && echo "udevadm_present")

fake_smart_value() {
    local PREFIX="$1" ID="$2" FIELD="$3" VALUE="$4"
    echo "${PREFIX} ${ID} ${FIELD} 0x0000 000 000 000 Old_age Always - ${VALUE}"
}

# This will be called on LSI based raidcontrollers and accesses
# the SMART data of SATA disks attached to a SAS Raid HBA via
# SCSI protocol interface.
discover_megaraid()
{
    MegaCli_Bin="$1"
    $MegaCli_Bin -AdpGetPCIInfo -aALL | \
        awk '
            /^PCI information for Controller / { CONTROLLER=$5 }
            /^Bus Number/ { BUS=$4 }
            /^Device Number/ { DEVICE=$4 }
            /^Function Number/ { FUNCTION=$4 }
            END { print CONTROLLER, BUS, DEVICE, FUNCTION }
        ' | \
        while read -r CONTROLLER BUS DEVICE FUNCTION; do
            if [ "${#BUS}" = 1 ]; then
                BUS="0${BUS}"
            fi
            if [ "${#DEVICE}" = 1 ]; then
                DEVICE="0${DEVICE}"
            fi
            HOST="$(echo "/sys/bus/pci/devices/0000:${BUS}:${DEVICE}.${FUNCTION}/host"*)"
            HOST="${HOST##*/host}"
            $MegaCli_Bin -PDlist -a"$CONTROLLER" -NoLog | \
            while read -r LINE ; do
                case "$LINE" in
                   # FIRST LINE
                   "Enclosure Device ID"*) #Enclosure Device ID: 252
                    ENC=$( echo "$LINE" | awk '{print $4}')
                          unset SLOT LOG_DEV_ID VEND MODEL
                ;;
                "Slot Number"*)  #Slot Number: 7
                    SLOT=$( echo "$LINE" | awk '{print $3}')
                ;;
                # Identify the logical device ID. smartctl needs it to access the disk.
                "Device Id"*)    #Device Id: 19
                    LOG_DEV_ID=$( echo "$LINE" | awk '{print $3}')
                ;;
                "PD Type"*)      #PD Type: SATA
                    VEND=$( echo "$LINE" | awk '{print $3}')
                ;;
                # This is the last value, generate output here
                "Inquiry Data"*)
                 #Inquiry Data: WD-WCC1T1035197WDC WD20EZRX-00DC0B0 80.00A80
                    # $4 seems to be better for some vendors... wont be possible to get this perfect.
                    MODEL=$( echo "$LINE" | awk '{print $3}')

                    # /dev/sdc ATA SAMSUNG_SSD_830   5 Reallocated_Sector_Ct   0x0033   100   100   010    Pre-fail  Always       -
                    echo "Enc${ENC}/Slot${SLOT} $VEND $MODEL smartctl -d megaraid,${LOG_DEV_ID} -v 9,raw48 -i -A -l error /dev/bus/$HOST"
                    ;;
                    esac
            done
        done
}

discover_dev_disk()
{
    for D in /dev/disk/by-id/{scsi,ata,nvme}-*; do
        [ "$D" != "${D%scsi-\*}" ] && continue
        [ "$D" != "${D%ata-\*}" ] && continue
        [ "$D" != "${D%nvme-\*}" ] && continue
        [ "$D" != "${D%-part*}" ] && continue
        N=$(readlink "$D")
        N=${N##*/}
        if [ -r /sys/block/"$N"/device/vendor ]; then
            VEND=$(tr -d ' ' < /sys/block/"$N"/device/vendor)
        elif [ -r /sys/block/"$N"/device/device/vendor ]; then
            VEND=NVME
        else
            # 2012-01-25 Stefan Kaerst CDJ - in case $N does not exist
            VEND=ATA
        fi

        if [ "$VEND" = "AMCC" ]; then
            # handled by discover_tw_cli
            continue
        fi

        if [ -r /sys/block/"$N"/device/model ]; then
            MODEL=$(sed -e 's/ /_/g' -e 's/_*$//g' < /sys/block/"$N"/device/model)
        else
            MODEL=$(smartctl -i -A -l error "$D" | grep -i "device model" | sed -e "s/.*:[ ]*//g" -e "s/\ /_/g")
        fi
        # Excluded disk models for SAN arrays or certain RAID luns that are also not usable..
        if [ "$MODEL" = "iSCSI_Disk" ] || [ "$MODEL" = "LOGICAL_VOLUME" ]; then
            continue
        fi

        # Exclude everything which can read a CD
        if [ "$INPATH_UDEVADM" == "udevadm_present" ] && (udevadm info /dev/"$N" | grep -Fxq 'E: ID_CDROM_CD=1'); then
            continue
        fi

        # strip device name for final output
        DNAME=${D#/dev/disk/by-id/scsi-}
        DNAME=${DNAME#/dev/disk/by-id/ata-}

        if [ "$VEND" = "NVME" ]; then
            echo "${DNAME} ${VEND} ${MODEL} smartctl -d nvme -i -A -l error $D"
        else
            echo "${DNAME} ${VEND} ${MODEL} smartctl -v 9,raw48 -i -A -l error $D"
        fi
    done
}

discover_tw_cli()
{
    tw_cli="$1"
    $tw_cli show | \
        awk '/^c[0-9]/ {print $1}' | \
        while read -r controller; do
            $tw_cli "/${controller}" show drivestatus
        done | \
        awk '/^p[0-9]/ { if ($6 != "SAS") print substr($3, 2) " " $7 }' | \
        while read -r controller port; do
            $tw_cli "/c$controller/p$port" show model serial | awk -F' = ' -v CONTROLLER="$controller" -v PORT="$port" '
                NR == 1 { MODEL=$2 }
                NR == 2 { SERIAL=$2 }
                END {
                    DNAME=MODEL "_" SERIAL;
                    gsub(/ /, "_", DNAME);
                    printf "%s %s %s smartctl -i -A -l error -d 3ware,%d /dev/twa%d\n", DNAME, VENDOR, MODEL, PORT, CONTROLLER
                }'
        done
}

discover_cciss()
{
    local -A BOARDS=()
    for SG in /dev/sg*; do
        local BOARD_ID
        local -i BAY=0
        # Controller: Smart Array P410
        #   Board ID: 0x01234567
        #   Logical drives: 1
        #   Running firmware: 3.66
        #   ROM firmware: 3.66
        # /dev/sda: (Smart Array P410) RAID 1 Volume 0 status: OK. 
        #   Physical drives: 2
        #          connector 2I box 1 bay 1                 ATA     TS32GSSD370S                         0123456789           P1225CE  OK
        #          connector 2I box 1 bay 2                 ATA     TS32GSSD370S                         012334568A           P1225CE  OK
        # /dev/sg0(Smart Array P410:0): Non-Volatile Cache status:
        #                    Cache configured: Yes
        #                  Total cache memory: 144 MiB
        #                         Cache Ratio: 100% Read / 0% Write
        #                   Read cache memory: 144 MiB
        #                  Write cache memory: 0 MiB
        #                 Write cache enabled: Yes

        cciss_vol_status --verbose "$SG" 2> /dev/null | while read -r A B C D E _ G H L _ N; do
            if [[ "$A" == "Board" ]] && [[ "$B" == "ID:" ]]; then
                BOARD_ID="$C"
                if [[ "${BOARDS[$BOARD_ID]:-}" = "1" ]]; then
                    # we already handled this controller
                    break
                fi
                BOARDS[$BOARD_ID]=1
            elif [[ "$A" == "connector" ]] && [[ "$E" == "bay" ]]; then
                VENDOR="$G"
                MODEL="$H"
                SERIAL="$L"
                echo "${VENDOR}_${MODEL}_${SERIAL} ${VENDOR} ${MODEL} smartctl -i -A -l error -d cciss,$BAY $SG"
                BAY+=1
            fi
        done
    done
}

parse_smartctl()
{
    local PREFIX="$1"

    local -i TOTAL_UNCORRECTED=0 HAVE_ERROR_LOG=0

    local Vendor Product Serial_number KEY VALUE

    # === START OF READ SMART DATA SECTION ===
    # Current Drive Temperature:     26 C
    # Drive Trip Temperature:        60 C
    # 
    # Accumulated power on time, hours:minutes 30646:44
    # Manufactured in week 48 of year 2015
    # Specified cycle count over device lifetime:  50000
    # Accumulated start-stop cycles:  30886
    # Specified load-unload count over device lifetime:  600000
    # Accumulated load-unload cycles:  32050
    # Elements in grown defect list: 0

    # Error counter log:
    #            Errors Corrected by           Total   Correction     Gigabytes    Total
    #                ECC          rereads/    errors   algorithm      processed    uncorrected
    #            fast | delayed   rewrites  corrected  invocations   [10^9 bytes]  errors
    # read:          0        4         0         0          0       8308.090           0
    # write:         0        5         0         5          0      13678.657           0
    # verify:        0        2         0         2          0         18.941           0
    while read -r LINE; do
        case "$LINE" in
            Vendor:*|Product:*|"Serial number:"*)
                echo "$LINE" | IFS=":" read -r KEY VALUE
                # strip whitespace
                echo "$VALUE" | read -r VALUE
                eval "${KEY//[^a-zA-Z0-9]/_}='${VALUE//[^a-zA-Z0-9]/_}'"
            ;;
            "Accumulated power on time"*)
                VALUE="${LINE##* }"
                VALUE="${VALUE%:*}"
                fake_smart_value "$PREFIX" 9 Power_On_Hours "$VALUE"
            ;;
            "Accumulated start-stop cycles:"*)
                fake_smart_value "$PREFIX" 12 Power_Cycle_Count "${LINE##* }"
            ;;
            "Current Drive Temperature:"*|"Temperature:"*)
                VALUE="${LINE% C}"
                VALUE="${VALUE% Celsius}"
                fake_smart_value "$PREFIX" 194 Temperature_Celsius "${VALUE##* } (0 0 0 0)"
            ;;
            "Elements in grown defect list:"*)
                fake_smart_value "$PREFIX" 5 Reallocated_Sector_Ct "${LINE##* }"
            ;;
            read:*|write:*|verify:*|"Media and Data Integrity Errors:"*)
                TOTAL_UNCORRECTED+="${LINE##* }"
                HAVE_ERROR_LOG=1
            ;;
            [0-9]*" Always "*|[0-9]*" Offline "*)
                echo "${PREFIX} ${LINE}"
            ;;
        esac
        if [ -n "${Vendor:-}" ] && [ -n "${Product:-}" ] && [ -n "${Serial_number:-}" ]; then
            PREFIX="${Vendor}_${Product}_${Serial_number} ${Vendor} ${Product}"
        fi
    done

    if [[ "$HAVE_ERROR_LOG" == 1 ]]; then
        fake_smart_value "$PREFIX" 187 Uncorrectable_Error_Cnt "$TOTAL_UNCORRECTED"
    fi
}

discover_disks()
{
        discover_dev_disk

        if inpath tw_cli; then
            discover_tw_cli tw_cli
        elif inpath tw-cli; then
            discover_tw_cli tw-cli
        fi

        if inpath cciss_vol_status; then
            discover_cciss
        fi

        if inpath MegaCli; then
            discover_megaraid MegaCli
        elif inpath MegaCli64; then
            discover_megaraid MegaCli64
        elif inpath megacli; then
            discover_megaraid megacli
        fi
}

query_disks()
{
    SEEN=
    while read -r DNAME VEND MODEL CMD; do
        # Avoid duplicate entries for same device
        if [ "${SEEN//.$DNAME./}" != "$SEEN" ] ; then
            continue
        fi

        if [ -z "$CMD" ]; then
            continue
        fi
        if $CMD | parse_smartctl "$DNAME $VEND $MODEL"; then
            SEEN="$SEEN.$DNAME."
        fi
    done

    # Circumvent bug "wait_for: No record of process" in bash < 5.1
    set +e
    /bin/true
}


# Only handle always updated values, add device path and vendor/model
if which smartctl > /dev/null 2>&1 ; then
    echo '<<<smart>>>'
    discover_disks | query_disks
else
    echo "ERROR: smartctl not found" >&2
fi
